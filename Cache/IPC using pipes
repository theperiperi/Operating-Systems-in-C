#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2]; // File descriptors for the pipe
    pid_t pid;     // Process ID

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // Child process (reads from the pipe)
        close(pipefd[1]); // Close the write end of the pipe

        char buffer[100];
        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));

        if (bytesRead == -1) {
            perror("Read from pipe failed");
            exit(EXIT_FAILURE);
        }

        buffer[bytesRead] = '\0'; // Null-terminate the string
        printf("Child process received: %s\n", buffer);

        close(pipefd[0]); // Close the read end of the pipe in the child process
    } else {
        // Parent process (writes to the pipe)
        close(pipefd[0]); // Close the read end of the pipe

        const char *message = "Hello from the parent process!";
        ssize_t bytesWritten = write(pipefd[1], message, strlen(message));

        if (bytesWritten == -1) {
            perror("Write to pipe failed");
            exit(EXIT_FAILURE);
        }

        close(pipefd[1]); // Close the write end of the pipe in the parent process
    }

    return 0;
}
