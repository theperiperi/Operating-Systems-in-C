#include <stdio.h>

void sjf(int processes[], int n, int burst_time[]) {
    int waiting_time[n], turnaround_time[n], completion_time[n];

    for (int i = 0; i < n; i++) {
        int min_index = i;

        for (int j = i + 1; j < n; j++) {
            if (burst_time[j] < burst_time[min_index])
                min_index = j;
        }

        int temp = burst_time[min_index];
        burst_time[min_index] = burst_time[i];
        burst_time[i] = temp;

        temp = processes[min_index];
        processes[min_index] = processes[i];
        processes[i] = temp;
    }

    waiting_time[0] = 0;
    turnaround_time[0] = burst_time[0];
    completion_time[0] = turnaround_time[0];

    for (int i = 1; i < n; i++) {
        waiting_time[i] = turnaround_time[i - 1];
        turnaround_time[i] = waiting_time[i] + burst_time[i];
        completion_time[i] = turnaround_time[i];
    }

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i], burst_time[i], waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int processes[n], burst_time[n];

    printf("Enter burst time for each process:\n");

    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d", &burst_time[i]);
    }

    sjf(processes, n, burst_time);

    return 0;
}
